#include "ckfft/ckfft.h"



// all this is just to get a cross-platform way to print stuff out to debugger/console/log:

#if __ANDROID__
#  include <android/log.h>
#  define CKFFT_PRINTF(fmt, ...) __android_log_print(ANDROID_LOG_INFO, "CKFFT", fmt, ##__VA_ARGS__)
#elif defined(_WIN64) || defined(_WIN32)
#  include <stdarg.h>
#  include <windows.h>
#  include <stdio.h>
#  define CKFFT_PRINTF(fmt, ...) debugPrintf(fmt, __VA_ARGS__)
#else
#  include <stdio.h>
#  define CKFFT_PRINTF printf
#endif

#if defined(_WIN64) || defined(_WIN32)
void debugPrintf(const char* fmt, ...)
{
    char buf[4096];
    va_list args;
    va_start(args, fmt);
    int n = _vsnprintf_s(buf, sizeof(buf), sizeof(buf)-1, fmt, args);
    va_end(args);

    buf[n] = '\0';
    OutputDebugString(buf);
    printf(buf);
}
#endif




// real input data (1024 floats)
float input[] =
{
   -0.999984f, -0.736924f, -0.511211f, -0.0826997f, -0.0655345f, -0.562082f, -0.905911f, 0.357729f, -0.358593f, 0.869386f, -0.232996f, 0.0388327f, -0.661931f, -0.930856f, -0.893077f, 0.0594004f, -0.342299f, -0.984604f, -0.233169f, -0.866316f, -0.165028f, 0.373545f, -0.177953f, 0.860873f, -0.692334f, 0.0538576f, -0.81607f, 0.307838f, -0.168001f, 0.402381f, -0.820642f, 0.524396f, -0.475094f, -0.905071f, -0.472164f, -0.343532f, -0.265277f, 0.512821f, -0.982075f, -0.269323f, -0.505922f, 0.965101f, -0.445321f, 0.506712f, -0.303037f, -0.854628f, -0.263269f, 0.769414f, -0.45458f, -0.127177f, -0.53299f, -0.0445365f, -0.524451f, -0.450186f, -0.28147f, -0.666986f, -0.0269652f, 0.795313f, -0.818416f, -0.878871f, -0.809306f, 0.00904579f, -0.0325839f, -0.361934f, -0.973284f, -0.0120466f, -0.467711f, -0.818534f, -0.895528f, -0.852502f, -0.00141419f, -0.231716f, -0.445836f, 0.827635f, -0.0594948f, -0.0711083f, -0.88196f, -0.899832f, -0.523029f, 0.540409f, -0.655635f, -0.749269f, -0.968265f, 0.376911f, -0.736494f, 0.259087f, -0.472449f, 0.450824f, -0.998916f, 0.777144f, -0.53361f, -0.387356f, -0.297969f, 0.0265474f, -0.182227f, 0.691963f, -0.175838f, 0.683021f, -0.461365f, -0.169211f, -0.074608f, -0.0641653f, -0.425575f, -0.643345f, -0.69256f, 0.14331f, -0.604811f, -0.933892f, -0.0688997f, -0.00303976f, -0.910722f, 0.496585f, -0.109168f, 0.781475f, -0.249699f, 0.684079f, -0.680465f, -0.574497f, -0.42942f, -0.739145f, -0.818019f, -0.450824f, -0.994001f, -0.171413f, -0.946247f, 0.419639f, -0.875795f, -0.520178f, -0.638208f, -0.364921f, -0.773981f, 0.304117f, -0.69933f, 0.362692f, -0.228371f, -0.224549f, -0.000517935f, -0.704934f, -0.174373f, 0.691151f, -0.180217f, 0.910818f, -0.112292f, -0.703697f, -0.96661f, -0.182467f, -0.71636f, 0.129797f, -0.495747f, -0.0229709f, -0.0719389f, 0.92219f, -0.747938f, -0.600486f, -0.361501f, 0.258538f, -0.746576f, 0.302507f, -0.243268f, 0.606146f, -0.504317f, -0.0471364f, -0.221372f, -0.593499f, -0.94325f, 0.803347f, -0.147005f, -0.715958f, -0.894974f, -0.179374f, -0.737623f, 0.771297f, -0.815653f, -0.675603f, -0.857873f, -0.269322f, -0.493885f, -0.729781f, -0.566306f, -0.0893854f, -0.300952f, -0.0953997f, -0.617889f, 0.863349f, -0.303292f, -0.569503f, -0.359185f, 0.817844f, -0.499749f, 0.72172f, -0.0574753f, 0.0119118f, -0.200787f, 0.635123f, -0.511687f, -0.07551f, -0.902735f, 0.265477f, -0.121339f, 0.649395f, -0.377962f, 0.404413f, -0.974291f, 0.90883f, -0.702539f, -0.421368f, -0.0748515f, 0.0288693f, -0.793132f, -0.171943f, -0.153433f, 0.753131f, -0.119923f, 0.459495f, -0.738527f, 0.431285f, -0.601441f, 0.413071f, -0.483432f, -0.961815f, -0.772062f, 0.0499748f, -0.0733545f, -0.869612f, -0.426845f, -0.0221137f, -0.335358f, 0.364098f, -0.600891f, 0.833268f, -0.731765f, 0.780037f, -0.0878966f, -0.72161f, -0.0993051f, 0.978725f, -0.568936f, -0.107953f, -0.368535f, 0.0293189f, -0.763008f, -0.120549f, -0.0649364f, 0.6133f, -0.269684f, -0.576962f, -0.998233f, -0.692791f, -0.260977f, 0.232701f, -0.99881f, -0.998242f, -0.546704f, 0.45467f, -0.361645f, -0.164553f, -0.364988f, 0.361124f, -0.589476f, 0.67284f, -0.417841f, 0.657416f, -0.810902f, -0.836525f, -0.52801f, 0.259144f, -0.572296f, -0.572906f, -0.837878f, -0.222354f, -0.904319f, 0.89509f, -0.220293f, -0.461571f, -0.384338f, -0.43193f, -0.553732f, 0.56773f, -0.15508f, -0.435688f, -0.612065f, -0.977368f, -0.616352f, 0.966472f, -0.511891f, 0.639452f, -0.72709f, -0.203713f, -0.20202f, -0.646239f, -0.656709f, -0.684538f, -0.975874f, -0.485663f, -0.532802f, -0.796725f, -0.561179f, 0.269435f, -0.392015f, 0.58954f, -0.392486f, 0.505881f, -0.339041f, 0.26686f, -0.887119f, 0.196433f, -0.545985f, -0.362444f, -0.399669f, -0.765126f, -0.525141f, 0.0522466f, -0.107823f, 0.175978f, -0.340667f, 0.405979f, -0.71391f, -0.676625f, -0.0293496f, 0.720451f, -0.626531f, 0.113672f, -0.477993f, -0.367985f, -0.729336f, 0.0570965f, -0.378522f, 0.176238f, -0.0361672f, -0.138304f, -0.482314f, -0.259547f, -0.213965f, -0.106268f, -0.0482076f, -0.224338f, -0.441414f, -0.843474f, -0.260516f, -0.492155f, -0.343568f, 0.352474f, -0.0278727f, 0.457217f, -0.441536f, 0.889506f, -0.0786053f, 0.880326f, -0.35688f, -0.0791317f, -0.0342906f, 0.322711f, -0.196334f, 0.211279f, -0.973005f, -0.699212f, -0.340197f, -0.312365f, -0.0834203f, 0.0456154f, -0.658477f, -0.970099f, -0.451581f, 0.285958f, -0.0922732f, 0.835695f, -0.466773f, 0.940173f, -0.506534f, 0.687951f, -0.388047f, -0.0884968f, -0.634203f, -0.955833f, -0.678502f, 0.4139f, -0.415653f, -0.126723f, -0.164842f, 0.50342f, -0.983066f, 0.391358f, -0.440977f, 0.507725f, -0.657642f, -0.991492f, -0.00861785f, -0.840166f, -0.673838f, 0.806602f, -0.565984f, 0.493358f, -0.127149f, -0.987317f, -0.169574f, 0.0369568f, -0.8663f, 0.0880454f, -0.220537f, -0.568348f, -0.228461f, 0.253723f, -0.318107f, 0.41864f, -0.0773226f, -0.439422f, -0.631864f, -0.256181f, -0.372203f, -0.379662f, -0.981305f, -0.792405f, -0.0419201f, 0.551761f, -0.55863f, -0.889442f, -0.85873f, -0.679452f, -0.447527f, -0.405956f, -0.898795f, -0.0443914f, -0.0856762f, 0.039977f, -0.107021f, -0.699377f, -0.428115f, 0.667364f, -0.391275f, 0.155552f, -0.362329f, -0.33765f, -0.885049f, 0.973766f, -0.0847863f, -0.996685f, -0.712385f, -0.941289f, -0.244899f, -0.0206966f, -0.152346f, 0.477917f, -0.358664f, 0.0725335f, -0.928825f, -0.754986f, -0.946711f, -0.623448f, -0.297363f, 0.228251f, -0.215223f, -0.748134f, -0.105724f, 0.908057f, -0.28615f, 0.676203f, -0.948505f, -0.481972f, -0.496945f, -0.151328f, -0.626096f, 0.795828f, -0.510828f, 0.521235f, -0.389713f, -0.0962975f, -0.47276f, 0.331007f, -0.766858f, -0.580875f, -0.772649f, 0.0939497f, -0.987841f, -0.648052f, -0.198719f, -0.136183f, -0.834987f, 0.374829f, -0.24938f, 0.672413f, -0.752725f, 0.946692f, -0.940729f, -0.839294f, -0.0115107f, 0.538875f, -0.868061f, -0.499689f, -0.280684f, 0.538228f, -8.93371e-5f, 0.498503f, -0.343807f, 0.363332f, -0.51354f, -0.927265f, -0.538856f, -0.556665f, -0.125204f, 0.305244f, -0.233221f, -0.257069f, -0.550398f, -0.532617f, -0.306023f, -0.668145f, -0.488208f, -0.680485f, -0.904723f, 0.323987f, -0.75011f, 0.898314f, -0.0316391f, 0.242091f, -0.82805f, -0.964111f, -0.187091f, 0.443743f, -0.006836f, -0.892611f, -0.116735f, 0.0383497f, -0.543888f, -0.869287f, -0.114419f, 0.95436f, -0.0645173f, -0.341888f, -0.10814f, 0.486548f, -0.589317f, -0.657241f, -0.25496f, 0.879451f, -0.929703f, -0.490085f, -0.85933f, -0.752302f, -0.0526757f, -0.679834f, -0.0354144f, -0.78963f, -0.683152f, -0.262876f, -0.152219f, -0.345545f, -0.427093f, 0.153552f, -0.743768f, 0.516492f, -0.673196f, 0.399582f, -0.22188f, 0.870483f, -0.211205f, -0.275833f, -0.0790094f, -0.0898552f, -0.196616f, -0.519119f, -0.833829f, -0.156843f, -0.0552401f, -0.420467f, -0.790062f, -0.567228f, -0.604037f, 0.0548782f, -0.337641f, 0.727286f, -0.512499f, 0.423129f, -0.472674f, -0.234357f, -0.837989f, -0.0804745f, -0.534266f, 0.590705f, -0.0173138f, -0.993542f, -0.467762f, 0.329378f, -0.149618f, -0.626351f, -0.926951f, -0.731922f, -0.591711f, 0.892089f, -0.65769f, 0.212003f, -0.872393f, -0.305017f, -0.415064f, 0.0193165f, -0.651673f, 0.668677f, -0.452886f, -0.341131f, -0.604169f, 0.263527f, -0.909319f, -0.917159f, -0.69337f, 0.53413f, -0.876537f, 0.0386064f, -0.8583f, -0.558969f, -0.590874f, -0.822015f, -0.399382f, 0.412923f, -0.0107382f, -0.476443f, -0.423143f, -0.243268f, -0.598711f, -0.534785f, -0.127808f, -0.061003f, -0.722375f, 0.954477f, -0.110962f, -0.931514f, -0.0475435f, -0.936722f, -0.506348f, 0.183176f, -0.645782f, -0.340842f, -0.535844f, 0.0730565f, -0.138763f, -0.192838f, -0.974649f, 0.933819f, -0.701061f, 0.735028f, -0.37679f, -0.703219f, -0.995197f, 0.279047f, -0.0638506f, 0.863829f, -0.381545f, 0.630814f, -0.0830693f, 0.145613f, -0.681568f, 0.890501f, -0.642667f, -0.689172f, -0.91785f, -0.312773f, -0.779961f, -0.806923f, -0.0375465f, -0.95519f, -0.122967f, 0.713752f, -0.0338162f, 0.349049f, -0.47435f, 0.396921f, -0.954401f, -0.616032f, -0.341982f, -0.308257f, -0.867419f, -0.718579f, -0.842235f, -0.556687f, -0.239771f, 0.172032f, -0.665374f, -0.947321f, -0.382253f, 0.524688f, -0.427391f, -0.845351f, -0.179619f, 0.851006f, -0.859396f, -0.139108f, -0.0119392f, 0.662512f, -0.838472f, 0.203275f, -0.447673f, 0.0386733f, -0.018366f, -0.677161f, -0.952231f, 0.148721f, -0.453498f, 0.0628546f, -0.397116f, 0.334099f, -0.805135f, 0.0974726f, -0.221475f, 0.335931f, -0.00974932f, 0.143165f, -0.177776f, -0.117374f, -0.697566f, 0.00454946f, -0.462728f, -0.936687f, -0.896767f, 0.0441269f, -0.358715f, -0.929881f, -0.509715f, -0.785639f, -0.234063f, 0.103659f, -0.194337f, 0.222221f, -0.870503f, 0.544061f, -0.026297f, -0.0266377f, -0.300255f, 0.393992f, -0.184925f, -0.026301f, -0.0404343f, 0.4209f, -0.0683973f, -0.446706f, -0.211076f, -0.439793f, -0.406739f, 0.0609791f, -0.876508f, -0.529195f, -0.173012f, 0.194952f, -0.566005f, 0.840505f, -0.362982f, 0.642355f, -0.054826f, -0.53946f, -0.712632f, 0.799042f, -0.497156f, 0.303029f, -0.990369f, 0.871872f, -0.449294f, 0.717532f, -0.442143f, 0.904862f, -0.0136399f, -0.754101f, -0.167049f, 0.404943f, -0.127018f, -0.784522f, -0.53235f, -0.800269f, -0.11747f, -0.310847f, -0.405872f, 0.515242f, -0.322981f, -0.338483f, -0.888788f, 0.146366f, -0.0294279f, -0.595036f, -0.771051f, 0.948696f, -0.729219f, -0.0163185f, -0.26521f, 0.609825f, -0.675592f, -0.68084f, -0.884554f, -0.701497f, -0.0637972f, -0.238783f, -0.767409f, -0.151733f, -0.175504f, 0.302589f, -0.383345f, -0.879715f, -0.628833f, 0.795314f, -0.838984f, 0.802436f, -0.540093f, -0.658408f, -0.144884f, -0.937192f, -0.606536f, 0.0444293f, -0.723244f, -0.445604f, -0.738988f, 0.173724f, -0.221656f, 0.623791f, -0.0513405f, 0.879743f, -0.159924f, 0.159725f, -0.49829f, 0.761568f, -0.323831f, -0.620903f, -0.486252f, 0.437839f, -0.758324f, -0.854262f, -0.420227f, 0.75812f, -0.281241f, -0.820294f, -0.677942f, -0.166407f, -0.807143f, 0.349386f, -0.125223f, 0.626094f, -0.756384f, 0.53872f, -0.270411f, 0.793048f, -0.756826f, -0.0270586f, -0.773859f, -0.245031f, -0.234761f, 0.375156f, -0.756521f, -0.846357f, -0.713396f, -0.0447184f, -0.417176f, -0.523961f, -0.218067f, 0.951762f, -0.257533f, 0.362398f, -0.817381f, -0.2752f, -0.718426f, 0.588556f, -0.142253f, -0.852978f, -0.00273887f, -0.0322543f, -0.0985304f, -0.000685338f, -0.481518f, 0.865687f, -0.399756f, -0.707609f, -0.779963f, -0.839356f, -0.944952f, -0.183645f, -0.523179f, 0.92632f, -0.666948f, -0.60384f, -0.741037f, -0.607385f, -0.321762f, 0.151358f, -0.119464f, 0.171349f, -0.134245f, -0.263595f, -0.235366f, 0.200265f, -0.141054f, -0.702425f, -0.340393f, 0.990801f, -0.396133f, -0.19452f, -0.698556f, 0.639054f, -0.586764f, -0.251501f, -0.980784f, -0.0404428f, -0.278116f, 0.29299f, -0.289796f, 0.59807f, -0.245272f, -0.284656f, -0.220999f, -0.331387f, -0.387177f, -0.710205f, -0.416949f, 0.333713f, -0.70873f, -0.370602f, -0.711715f, 0.204499f, -0.988824f, 0.841659f, -0.23609f, 0.0330629f, -0.311089f, -0.471733f, -0.418f, 0.667296f, -0.751219f, 0.269239f, -0.902605f, -0.0839083f, -0.246367f, -0.688254f, -0.511711f, 0.331946f, -0.976939f, 0.589761f, -0.121829f, -0.422691f, -0.16888f, -0.358777f, -0.0291806f, 0.43831f, -0.684088f, -0.536209f, -0.0699859f, -0.253281f, -0.899914f, -0.852299f, -0.595101f, 0.132365f, -0.663048f, -0.154895f, -0.679097f, -0.413913f, -0.637608f, -0.284949f, -0.86822f, 0.178838f, -0.261919f, -0.0738826f, -0.255661f, 0.888904f, -0.188427f, -0.899037f, -0.1103f, 0.191854f, -0.496622f, 0.728343f, -0.737954f, -0.790841f, -0.330616f, 0.666756f, -0.16257f, 0.317187f, -0.964065f, -0.962168f, -0.842946f, -0.610642f, -0.935446f, 0.0461449f, -0.442409f, 0.43959f, -0.180917f, 0.674164f, -0.669383f, 0.319775f, -0.460896f, 0.286053f, -0.300942f, 0.0697524f, -0.328295f, -0.353142f, -0.738376f, -0.115259f, -0.835935f, -0.446665f, -0.903507f, -0.765524f, -0.167985f, 0.672751f, -0.925071f, -0.334143f, -0.0523634f, 0.0719127f, -0.636215f, 0.85978f, -0.325786f, -0.513543f, -0.882858f, 0.193446f, -0.747933f, -0.506053f, -0.773451f, -0.607644f, -0.674084f, 0.671994f, -0.20481f, 0.246485f, -0.677357f, 0.343296f, -0.216889f, 0.742568f, -0.334696f, -0.768787f, -0.99992f, 0.352131f, -0.257506f, -0.0909057f, -0.148692f, -0.935461f, -0.297215f, 0.710165f
}; 

int main(int argc, char* argv[]) 
{
    int count = sizeof(input) / sizeof(input[0]); // 1024

    // We are going to do a forward FFT on input, then an inverse FFT on the result;
    // we expect to get back the original input, scaled by 2*count = 2048.

    // First, create a context.  
    // Our input data will contain at most 1024 elements, so we pass in 1024 for maxCount.
    // Because we're going to do both the forward and inverse FFT, we specify kCkFftDirection_Both.  (If we were only doing one or the other, we could specify only one direction, and use less memory.)
    // We pass in NULL for both buf and bufSize, because we're going to let CkFftInit() to allocate memory for us.
    CkFftContext* context = CkFftInit(count, kCkFftDirection_Both, NULL, NULL);

    // Now do the forward FFT.
    // Because the input data is real, we will only get count/2+1 = 513 output values.
    CkFftComplex* forwardOutput = new CkFftComplex[count/2 + 1];
    CkFftRealForward(context, count, input, forwardOutput);

    // Now do the inverse FFT.
    // For this one, we need a temporary buffer, with count/2+1 elements.
    CkFftComplex* tmpBuf = new CkFftComplex[count/2 + 1];
    float* inverseOutput = new float[count];
    CkFftRealInverse(context, count, forwardOutput, inverseOutput, tmpBuf);

    // Calculate sum of squares of differences of the input data and the output data
    // (compensating for the scale factor of 2*count); this should be close to 0.
    float err = 0.0f;
    for (int i = 0; i < count; ++i)
    {
        float diff = inverseOutput[i] / 2048.0f - input[i];
        err += diff * diff;
    }
    CKFFT_PRINTF("error: %f\n", err);

    // Clean up
    delete[] forwardOutput;
    delete[] inverseOutput;
    delete[] tmpBuf;
    CkFftShutdown(context);

    return 0;
}
