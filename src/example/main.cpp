#include <stdio.h>
#include <math.h>
#include "ckfft/ckfft.h"

// real input data (1024 floats)
float input[] =
{
   -0.999984, -0.736924, -0.511211, -0.0826997, -0.0655345, -0.562082, -0.905911, 0.357729, -0.358593, 0.869386, -0.232996, 0.0388327, -0.661931, -0.930856, -0.893077, 0.0594004, -0.342299, -0.984604, -0.233169, -0.866316, -0.165028, 0.373545, -0.177953, 0.860873, -0.692334, 0.0538576, -0.81607, 0.307838, -0.168001, 0.402381, -0.820642, 0.524396, -0.475094, -0.905071, -0.472164, -0.343532, -0.265277, 0.512821, -0.982075, -0.269323, -0.505922, 0.965101, -0.445321, 0.506712, -0.303037, -0.854628, -0.263269, 0.769414, -0.45458, -0.127177, -0.53299, -0.0445365, -0.524451, -0.450186, -0.28147, -0.666986, -0.0269652, 0.795313, -0.818416, -0.878871, -0.809306, 0.00904579, -0.0325839, -0.361934, -0.973284, -0.0120466, -0.467711, -0.818534, -0.895528, -0.852502, -0.00141419, -0.231716, -0.445836, 0.827635, -0.0594948, -0.0711083, -0.88196, -0.899832, -0.523029, 0.540409, -0.655635, -0.749269, -0.968265, 0.376911, -0.736494, 0.259087, -0.472449, 0.450824, -0.998916, 0.777144, -0.53361, -0.387356, -0.297969, 0.0265474, -0.182227, 0.691963, -0.175838, 0.683021, -0.461365, -0.169211, -0.074608, -0.0641653, -0.425575, -0.643345, -0.69256, 0.14331, -0.604811, -0.933892, -0.0688997, -0.00303976, -0.910722, 0.496585, -0.109168, 0.781475, -0.249699, 0.684079, -0.680465, -0.574497, -0.42942, -0.739145, -0.818019, -0.450824, -0.994001, -0.171413, -0.946247, 0.419639, -0.875795, -0.520178, -0.638208, -0.364921, -0.773981, 0.304117, -0.69933, 0.362692, -0.228371, -0.224549, -0.000517935, -0.704934, -0.174373, 0.691151, -0.180217, 0.910818, -0.112292, -0.703697, -0.96661, -0.182467, -0.71636, 0.129797, -0.495747, -0.0229709, -0.0719389, 0.92219, -0.747938, -0.600486, -0.361501, 0.258538, -0.746576, 0.302507, -0.243268, 0.606146, -0.504317, -0.0471364, -0.221372, -0.593499, -0.94325, 0.803347, -0.147005, -0.715958, -0.894974, -0.179374, -0.737623, 0.771297, -0.815653, -0.675603, -0.857873, -0.269322, -0.493885, -0.729781, -0.566306, -0.0893854, -0.300952, -0.0953997, -0.617889, 0.863349, -0.303292, -0.569503, -0.359185, 0.817844, -0.499749, 0.72172, -0.0574753, 0.0119118, -0.200787, 0.635123, -0.511687, -0.07551, -0.902735, 0.265477, -0.121339, 0.649395, -0.377962, 0.404413, -0.974291, 0.90883, -0.702539, -0.421368, -0.0748515, 0.0288693, -0.793132, -0.171943, -0.153433, 0.753131, -0.119923, 0.459495, -0.738527, 0.431285, -0.601441, 0.413071, -0.483432, -0.961815, -0.772062, 0.0499748, -0.0733545, -0.869612, -0.426845, -0.0221137, -0.335358, 0.364098, -0.600891, 0.833268, -0.731765, 0.780037, -0.0878966, -0.72161, -0.0993051, 0.978725, -0.568936, -0.107953, -0.368535, 0.0293189, -0.763008, -0.120549, -0.0649364, 0.6133, -0.269684, -0.576962, -0.998233, -0.692791, -0.260977, 0.232701, -0.99881, -0.998242, -0.546704, 0.45467, -0.361645, -0.164553, -0.364988, 0.361124, -0.589476, 0.67284, -0.417841, 0.657416, -0.810902, -0.836525, -0.52801, 0.259144, -0.572296, -0.572906, -0.837878, -0.222354, -0.904319, 0.89509, -0.220293, -0.461571, -0.384338, -0.43193, -0.553732, 0.56773, -0.15508, -0.435688, -0.612065, -0.977368, -0.616352, 0.966472, -0.511891, 0.639452, -0.72709, -0.203713, -0.20202, -0.646239, -0.656709, -0.684538, -0.975874, -0.485663, -0.532802, -0.796725, -0.561179, 0.269435, -0.392015, 0.58954, -0.392486, 0.505881, -0.339041, 0.26686, -0.887119, 0.196433, -0.545985, -0.362444, -0.399669, -0.765126, -0.525141, 0.0522466, -0.107823, 0.175978, -0.340667, 0.405979, -0.71391, -0.676625, -0.0293496, 0.720451, -0.626531, 0.113672, -0.477993, -0.367985, -0.729336, 0.0570965, -0.378522, 0.176238, -0.0361672, -0.138304, -0.482314, -0.259547, -0.213965, -0.106268, -0.0482076, -0.224338, -0.441414, -0.843474, -0.260516, -0.492155, -0.343568, 0.352474, -0.0278727, 0.457217, -0.441536, 0.889506, -0.0786053, 0.880326, -0.35688, -0.0791317, -0.0342906, 0.322711, -0.196334, 0.211279, -0.973005, -0.699212, -0.340197, -0.312365, -0.0834203, 0.0456154, -0.658477, -0.970099, -0.451581, 0.285958, -0.0922732, 0.835695, -0.466773, 0.940173, -0.506534, 0.687951, -0.388047, -0.0884968, -0.634203, -0.955833, -0.678502, 0.4139, -0.415653, -0.126723, -0.164842, 0.50342, -0.983066, 0.391358, -0.440977, 0.507725, -0.657642, -0.991492, -0.00861785, -0.840166, -0.673838, 0.806602, -0.565984, 0.493358, -0.127149, -0.987317, -0.169574, 0.0369568, -0.8663, 0.0880454, -0.220537, -0.568348, -0.228461, 0.253723, -0.318107, 0.41864, -0.0773226, -0.439422, -0.631864, -0.256181, -0.372203, -0.379662, -0.981305, -0.792405, -0.0419201, 0.551761, -0.55863, -0.889442, -0.85873, -0.679452, -0.447527, -0.405956, -0.898795, -0.0443914, -0.0856762, 0.039977, -0.107021, -0.699377, -0.428115, 0.667364, -0.391275, 0.155552, -0.362329, -0.33765, -0.885049, 0.973766, -0.0847863, -0.996685, -0.712385, -0.941289, -0.244899, -0.0206966, -0.152346, 0.477917, -0.358664, 0.0725335, -0.928825, -0.754986, -0.946711, -0.623448, -0.297363, 0.228251, -0.215223, -0.748134, -0.105724, 0.908057, -0.28615, 0.676203, -0.948505, -0.481972, -0.496945, -0.151328, -0.626096, 0.795828, -0.510828, 0.521235, -0.389713, -0.0962975, -0.47276, 0.331007, -0.766858, -0.580875, -0.772649, 0.0939497, -0.987841, -0.648052, -0.198719, -0.136183, -0.834987, 0.374829, -0.24938, 0.672413, -0.752725, 0.946692, -0.940729, -0.839294, -0.0115107, 0.538875, -0.868061, -0.499689, -0.280684, 0.538228, -8.93371e-5, 0.498503, -0.343807, 0.363332, -0.51354, -0.927265, -0.538856, -0.556665, -0.125204, 0.305244, -0.233221, -0.257069, -0.550398, -0.532617, -0.306023, -0.668145, -0.488208, -0.680485, -0.904723, 0.323987, -0.75011, 0.898314, -0.0316391, 0.242091, -0.82805, -0.964111, -0.187091, 0.443743, -0.006836, -0.892611, -0.116735, 0.0383497, -0.543888, -0.869287, -0.114419, 0.95436, -0.0645173, -0.341888, -0.10814, 0.486548, -0.589317, -0.657241, -0.25496, 0.879451, -0.929703, -0.490085, -0.85933, -0.752302, -0.0526757, -0.679834, -0.0354144, -0.78963, -0.683152, -0.262876, -0.152219, -0.345545, -0.427093, 0.153552, -0.743768, 0.516492, -0.673196, 0.399582, -0.22188, 0.870483, -0.211205, -0.275833, -0.0790094, -0.0898552, -0.196616, -0.519119, -0.833829, -0.156843, -0.0552401, -0.420467, -0.790062, -0.567228, -0.604037, 0.0548782, -0.337641, 0.727286, -0.512499, 0.423129, -0.472674, -0.234357, -0.837989, -0.0804745, -0.534266, 0.590705, -0.0173138, -0.993542, -0.467762, 0.329378, -0.149618, -0.626351, -0.926951, -0.731922, -0.591711, 0.892089, -0.65769, 0.212003, -0.872393, -0.305017, -0.415064, 0.0193165, -0.651673, 0.668677, -0.452886, -0.341131, -0.604169, 0.263527, -0.909319, -0.917159, -0.69337, 0.53413, -0.876537, 0.0386064, -0.8583, -0.558969, -0.590874, -0.822015, -0.399382, 0.412923, -0.0107382, -0.476443, -0.423143, -0.243268, -0.598711, -0.534785, -0.127808, -0.061003, -0.722375, 0.954477, -0.110962, -0.931514, -0.0475435, -0.936722, -0.506348, 0.183176, -0.645782, -0.340842, -0.535844, 0.0730565, -0.138763, -0.192838, -0.974649, 0.933819, -0.701061, 0.735028, -0.37679, -0.703219, -0.995197, 0.279047, -0.0638506, 0.863829, -0.381545, 0.630814, -0.0830693, 0.145613, -0.681568, 0.890501, -0.642667, -0.689172, -0.91785, -0.312773, -0.779961, -0.806923, -0.0375465, -0.95519, -0.122967, 0.713752, -0.0338162, 0.349049, -0.47435, 0.396921, -0.954401, -0.616032, -0.341982, -0.308257, -0.867419, -0.718579, -0.842235, -0.556687, -0.239771, 0.172032, -0.665374, -0.947321, -0.382253, 0.524688, -0.427391, -0.845351, -0.179619, 0.851006, -0.859396, -0.139108, -0.0119392, 0.662512, -0.838472, 0.203275, -0.447673, 0.0386733, -0.018366, -0.677161, -0.952231, 0.148721, -0.453498, 0.0628546, -0.397116, 0.334099, -0.805135, 0.0974726, -0.221475, 0.335931, -0.00974932, 0.143165, -0.177776, -0.117374, -0.697566, 0.00454946, -0.462728, -0.936687, -0.896767, 0.0441269, -0.358715, -0.929881, -0.509715, -0.785639, -0.234063, 0.103659, -0.194337, 0.222221, -0.870503, 0.544061, -0.026297, -0.0266377, -0.300255, 0.393992, -0.184925, -0.026301, -0.0404343, 0.4209, -0.0683973, -0.446706, -0.211076, -0.439793, -0.406739, 0.0609791, -0.876508, -0.529195, -0.173012, 0.194952, -0.566005, 0.840505, -0.362982, 0.642355, -0.054826, -0.53946, -0.712632, 0.799042, -0.497156, 0.303029, -0.990369, 0.871872, -0.449294, 0.717532, -0.442143, 0.904862, -0.0136399, -0.754101, -0.167049, 0.404943, -0.127018, -0.784522, -0.53235, -0.800269, -0.11747, -0.310847, -0.405872, 0.515242, -0.322981, -0.338483, -0.888788, 0.146366, -0.0294279, -0.595036, -0.771051, 0.948696, -0.729219, -0.0163185, -0.26521, 0.609825, -0.675592, -0.68084, -0.884554, -0.701497, -0.0637972, -0.238783, -0.767409, -0.151733, -0.175504, 0.302589, -0.383345, -0.879715, -0.628833, 0.795314, -0.838984, 0.802436, -0.540093, -0.658408, -0.144884, -0.937192, -0.606536, 0.0444293, -0.723244, -0.445604, -0.738988, 0.173724, -0.221656, 0.623791, -0.0513405, 0.879743, -0.159924, 0.159725, -0.49829, 0.761568, -0.323831, -0.620903, -0.486252, 0.437839, -0.758324, -0.854262, -0.420227, 0.75812, -0.281241, -0.820294, -0.677942, -0.166407, -0.807143, 0.349386, -0.125223, 0.626094, -0.756384, 0.53872, -0.270411, 0.793048, -0.756826, -0.0270586, -0.773859, -0.245031, -0.234761, 0.375156, -0.756521, -0.846357, -0.713396, -0.0447184, -0.417176, -0.523961, -0.218067, 0.951762, -0.257533, 0.362398, -0.817381, -0.2752, -0.718426, 0.588556, -0.142253, -0.852978, -0.00273887, -0.0322543, -0.0985304, -0.000685338, -0.481518, 0.865687, -0.399756, -0.707609, -0.779963, -0.839356, -0.944952, -0.183645, -0.523179, 0.92632, -0.666948, -0.60384, -0.741037, -0.607385, -0.321762, 0.151358, -0.119464, 0.171349, -0.134245, -0.263595, -0.235366, 0.200265, -0.141054, -0.702425, -0.340393, 0.990801, -0.396133, -0.19452, -0.698556, 0.639054, -0.586764, -0.251501, -0.980784, -0.0404428, -0.278116, 0.29299, -0.289796, 0.59807, -0.245272, -0.284656, -0.220999, -0.331387, -0.387177, -0.710205, -0.416949, 0.333713, -0.70873, -0.370602, -0.711715, 0.204499, -0.988824, 0.841659, -0.23609, 0.0330629, -0.311089, -0.471733, -0.418, 0.667296, -0.751219, 0.269239, -0.902605, -0.0839083, -0.246367, -0.688254, -0.511711, 0.331946, -0.976939, 0.589761, -0.121829, -0.422691, -0.16888, -0.358777, -0.0291806, 0.43831, -0.684088, -0.536209, -0.0699859, -0.253281, -0.899914, -0.852299, -0.595101, 0.132365, -0.663048, -0.154895, -0.679097, -0.413913, -0.637608, -0.284949, -0.86822, 0.178838, -0.261919, -0.0738826, -0.255661, 0.888904, -0.188427, -0.899037, -0.1103, 0.191854, -0.496622, 0.728343, -0.737954, -0.790841, -0.330616, 0.666756, -0.16257, 0.317187, -0.964065, -0.962168, -0.842946, -0.610642, -0.935446, 0.0461449, -0.442409, 0.43959, -0.180917, 0.674164, -0.669383, 0.319775, -0.460896, 0.286053, -0.300942, 0.0697524, -0.328295, -0.353142, -0.738376, -0.115259, -0.835935, -0.446665, -0.903507, -0.765524, -0.167985, 0.672751, -0.925071, -0.334143, -0.0523634, 0.0719127, -0.636215, 0.85978, -0.325786, -0.513543, -0.882858, 0.193446, -0.747933, -0.506053, -0.773451, -0.607644, -0.674084, 0.671994, -0.20481, 0.246485, -0.677357, 0.343296, -0.216889, 0.742568, -0.334696, -0.768787, -0.99992, 0.352131, -0.257506, -0.0909057, -0.148692, -0.935461, -0.297215, 0.710165
}; 

int main(int argc, char* argv[]) 
{
    int n = sizeof(input) / sizeof(input[0]); // 1024

    // We are going to do a forward FFT on input, then an inverse FFT on the result;
    // we expect to get back the original input, scaled by 2*n = 2048.

    // First, create a context.  
    // Our input data will contain at most 1024 elements, so we pass in 1024 for maxCount.
    // Because we're going to do both the forward and inverse FFT, we specify kCkFftDirection_Both.  (If we were only doing one or the other, we could specify only one direction, and use less memory.)
    // We pass in NULL for both buf and bufSize, because we're going to let CkFftInit() to allocate memory for us.
    CkFftContext* context = CkFftInit(n, kCkFftDirection_Both, NULL, NULL);

    // Now do the forward FFT.
    // Because the input data is real, we will only get n/2+1 = 513 output values.
    CkFftComplex* forwardOutput = new CkFftComplex[n/2 + 1];
    CkFftRealForward(context, n, input, forwardOutput);

    // Now do the inverse FFT.
    // For this one, we need a temporary buffer, with n/2+1 elements.
    CkFftComplex* tmpBuf = new CkFftComplex[n/2 + 1];
    float* inverseOutput = new float[n];
    CkFftRealInverse(context, n, forwardOutput, inverseOutput, tmpBuf);

    // Calculate sum of squares of differences of the input data and the output data
    // (compensating for the scale factor of 2n); this should be close to 0.
    float err = 0.0f;
    for (int i = 0; i < n; ++i)
    {
        float diff = inverseOutput[i] / 2048.0f - input[i];
        err += diff * diff;
    }
    printf("error: %f\n", err);

    // Clean up
    delete[] forwardOutput;
    delete[] inverseOutput;
    delete[] tmpBuf;
    CkFftShutdown(context);

    return 0;
}
